#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)
// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

#include <xc.h>
#include <stdint.h>
#include <stdlib.h>

#define _XTAL_FREQ 4000000
#define dirEEPROM 0x04 //DIRECCIÓN DONDE LO GUARDAREMOS COMO CONSTANTE

//VARIABLES
uint8_t potValue;
uint8_t botonPrevState;

//PROTOTIPOS DE FUNCIONES
void setup(void);
void writeToEEPROM(uint8_t data, uint8_t address);
uint8_t readFromEEPROM(uint8_t address);

//interrupciones
void __interrupt() isr(void){
    if(INTCONbits.RBIF) //BANDERAS DE INTERRUPCIÓN DEL PUERTO B
    {
        PORTB = PORTB; //SIEMPRE SE HACE ALGO CON EL PUERTO B, DEBIDO A LA BANDERA
        INTCONbits.RBIF = 0; //BAJA LA BANDERA DEL PUERTO B
    }
}

//MAIN PRINCIPAL
void main(void)
{
    setup();//LLAMA A LAS CONFIGURACIONES
    ADCON0bits.GO = 1; //SE REALIZA LA CONVERSIÓN DEL ADC
    
    while(1)
    {
        if(ADCON0bits.GO==0) //ANTES DE REALIZAR LA CONVERSIÓN
        {
            potValue = ADRESH;//SE OBTIENE EL VALOR DEL ADC A LA VARIABLE POTVALUE
            PORTD = potValue;//EL PUERTO D OBTIENE EL VALOR DEL POTENCIÓMETRO
            __delay_us(50);//ESPERA UN DELAY
            ADCON0bits.GO = 1;//REALIZA LA CONVERSIÓN OTRA VEZ
        }
        
        PORTC = readFromEEPROM(dirEEPROM);
        
        if(RB0 == 0)
            botonPrevState = 1; //SI PRESIONA EL PIN 0, COLOCA EL SIGUIENTE ESTADO EN 1
        
        if (RB0 == 1 && botonPrevState ==1)//ANTI REBOTE
        {
            writeToEEPROM(potValue, dirEEPROM); //SE ESCRIBE A LA EEPROM EL VALOR DEL POTENCIÓMETRO EN LA DIRECCIÓN
            botonPrevState = 0;//COLOCA EL SIGUIENTE ESTADO EN 0, CUANDO PRESIONA EL PIN 0
        }
        if (RB1 ==0){
            INTCONbits.RBIF = 0; //LIMPIA LA BANDERA
            SLEEP(); //MODO DORMIR
        }   
    }   
}

void setup(void){
//CONFIGURACIÓN DE LOS PUERTOS
    ANSEL = 0b00100000; //CANAL AN5 (RE0) como entrada analógica
    ANSELH = 0x00;
    
    TRISA = 0x00;
    TRISB = 0b00000111; //rb0 y rb1 como inputs
    TRISC = 0x00;
    TRISD = 0x00;
    TRISE = 0x01; //RE0 COMO INPUT 
    
    //LIMPIEZA DE PUERTOS
    PORTA = 0x00;
    PORTB= 0x00;
    PORTC = 0x00;
    PORTD = 0x00;
    PORTE = 0x00;
    
    //CONFIGURACIÓN PULL UPS
    OPTION_REGbits.nRBPU = 0; 
    WPUBbits.WPUB0 = 1;
    WPUBbits.WPUB1 = 1;
    WPUBbits.WPUB2 = 1;
    
    //CONFIGURACIÓN DE INTERRUPCIONES SIN LA GLOBAL
    INTCONbits.RBIE = 1;
    INTCONbits.RBIF = 0;
    IOCBbits.IOCB0 = 1;
    IOCBbits.IOCB2 = 1;
    
    //CONFIGURACIÓN DEL OSCILADOR
    OSCCONbits.IRCF2 = 1;
    OSCCONbits.IRCF1 = 1;
    OSCCONbits.IRCF0 = 0;
    OSCCONbits.SCS = 1;
    
    //CONFIGURACIÓN DEL ADC
    ADCON1bits.ADFM = 0;//JUSTIFICADO A LA IZQUIERDA
    ADCON1bits.VCFG0 = 0; //VOLTAJES DE REFERENCIA EN VDD Y VSS
    ADCON1bits.VCFG1  = 0;
    
    ADCON0bits.ADCS= 1; //FOSC/8
    ADCON0bits.CHS = 5; //CANAL 5
    __delay_us(100);
    ADCON0bits.ADON = 1; //ENCEDER EL MÓDULO ADC
    return;
}

//funciones
void writeToEEPROM(uint8_t  data, uint8_t address)
{
    EEADR = address; //EL REGISTRO EEADR RECIBE LA DIRECCIÓN DONDE SE GUARDA
    EEDAT = data;//EL REGISTRO EEDAT RECIBE EL DATA
    EECON1bits.EEPGD = 0; //ESCRIBIR A MEMORIA DE DATOS
    EECON1bits.WREN = 1; //HABILITAR ESCRITURA A EEPROM
    
    INTCONbits.GIE = 0; // INTERRUPCIONES DESABILITADAS
    
    EECON2 = 0x55; //SECUENCIA OBLIGATORIA
    EECON2 = 0xAA;
    EECON1bits.WR = 1; //HABILITA LA ESCRITURA
    
    EECON1bits.WREN = 0; //DESABILITA LA ESCRITURA
}

uint8_t readFromEEPROM(uint8_t address)
{
    EEADR = address; //ENVIA LA DIRECCIÓN
    EECON1bits.EEPGD = 0;//ESCRIBE EN MEMORIA DE DATOS
    EECON1bits.RD = 1;//HABILITA LA LECTURA
    return EEDAT;  //REGRESA EL VALOR DE DONDE GUARDÓ 
}
